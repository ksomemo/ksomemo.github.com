{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": "true"
   },
   "source": [
    "# Table of Contents\n",
    " <p><div class=\"lev2\"><a href=\"#pandas-notes-0.1\"><span class=\"toc-item-num\">0.1&nbsp;&nbsp;</span>pandas notes</a></div><div class=\"lev2\"><a href=\"#環境準備-0.2\"><span class=\"toc-item-num\">0.2&nbsp;&nbsp;</span>環境準備</a></div><div class=\"lev2\"><a href=\"#データ準備のための準備-0.3\"><span class=\"toc-item-num\">0.3&nbsp;&nbsp;</span>データ準備のための準備</a></div><div class=\"lev3\"><a href=\"#[0,-1)-0.3.1\"><span class=\"toc-item-num\">0.3.1&nbsp;&nbsp;</span>[0, 1)</a></div><div class=\"lev2\"><a href=\"#正規分布？-0.4\"><span class=\"toc-item-num\">0.4&nbsp;&nbsp;</span>正規分布？</a></div><div class=\"lev3\"><a href=\"#カテゴリ変数化-0.4.1\"><span class=\"toc-item-num\">0.4.1&nbsp;&nbsp;</span>カテゴリ変数化</a></div><div class=\"lev2\"><a href=\"#quantile-0.5\"><span class=\"toc-item-num\">0.5&nbsp;&nbsp;</span>quantile</a></div><div class=\"lev2\"><a href=\"#基礎集計-0.6\"><span class=\"toc-item-num\">0.6&nbsp;&nbsp;</span>基礎集計</a></div><div class=\"lev2\"><a href=\"#正規化-0.7\"><span class=\"toc-item-num\">0.7&nbsp;&nbsp;</span>正規化</a></div><div class=\"lev2\"><a href=\"#累積構成比のための処理-0.8\"><span class=\"toc-item-num\">0.8&nbsp;&nbsp;</span>累積構成比のための処理</a></div><div class=\"lev2\"><a href=\"#分布-0.9\"><span class=\"toc-item-num\">0.9&nbsp;&nbsp;</span>分布</a></div><div class=\"lev2\"><a href=\"#formula式-0.10\"><span class=\"toc-item-num\">0.10&nbsp;&nbsp;</span>formula式</a></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## pandas notes\n",
    "- pandasのメモ\n",
    "- python3.5.1を使うようにする\n",
    "- pandas 0.17.1を使うようにする\n",
    "\n",
    "## 環境準備\n",
    "```bash:anaconda_py3.5.1\n",
    "pyenv install anaconda3-2.5.0\n",
    "pyenv local anaconda3-2.5.0\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## データ準備のための準備"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "nrow, ncol = 2, 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### [0, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.90160673,  0.50850989,  0.60819238],\n",
       "       [ 0.03801823,  0.12838991,  0.05579081]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.rand(nrow, ncol)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 正規分布？"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.41047876,  0.96353492, -0.52898658],\n",
       "       [ 1.17824705, -0.44607617, -0.25503468]])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randn(row_count, col_count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11c6e3a20>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11c6efba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.Series(np.random.randn(1, 10000)[0], name=\"a\").hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1.01418904, -0.38533656,  2.02055062, ...,  1.58338601,\n",
       "        -1.42410101,  0.16196371]])"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randn(1, 10000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 8, 52, 30, 40, 42, 21, 34, 11, 77, 48])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randint(1, 100, 10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>a</td>\n",
       "      <td>1</td>\n",
       "      <td>0.548814</td>\n",
       "      <td>-0.101697</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>b</td>\n",
       "      <td>2</td>\n",
       "      <td>0.715189</td>\n",
       "      <td>0.019279</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>c</td>\n",
       "      <td>3</td>\n",
       "      <td>0.602763</td>\n",
       "      <td>1.849591</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>d</td>\n",
       "      <td>4</td>\n",
       "      <td>0.544883</td>\n",
       "      <td>-0.214167</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>e</td>\n",
       "      <td>1</td>\n",
       "      <td>0.423655</td>\n",
       "      <td>-0.499017</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a  b  c         d         e   f\n",
       "0  1  a  1  0.548814 -0.101697  53\n",
       "1  2  b  2  0.715189  0.019279  76\n",
       "2  3  c  3  0.602763  1.849591  54\n",
       "3  4  d  4  0.544883 -0.214167  94\n",
       "4  5  e  1  0.423655 -0.499017  68"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import string\n",
    "\n",
    "np.random.seed(0)\n",
    "data = {\n",
    "    \"a\": range(1, 1000+1),\n",
    "    \"b\": list(string.ascii_letters[:25] * 40),\n",
    "    \"c\": [1,2,3,4] * 250,\n",
    "    \"d\": np.random.rand(1000),\n",
    "    \"e\": np.random.randn(1000),\n",
    "    \"f\": np.random.randint(1, 100, 1000)\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "Name: c, dtype: int64"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"c\"].head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### カテゴリ変数化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "Name: c, dtype: category\n",
       "Categories (4, int64): [1, 2, 3, 4]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"c\"] = df.c.astype(\"category\")\n",
    "df[\"c\"].head(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## quantile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "a    500.500000\n",
       "d      0.481323\n",
       "e      0.030935\n",
       "f     51.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.quantile()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decile = list(map(lambda x: x / 10, range(0, 10+1)))\n",
    "decile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000546</td>\n",
       "      <td>-2.994613</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1</th>\n",
       "      <td>100.9</td>\n",
       "      <td>0.100287</td>\n",
       "      <td>-1.198404</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2</th>\n",
       "      <td>200.8</td>\n",
       "      <td>0.203938</td>\n",
       "      <td>-0.825520</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.3</th>\n",
       "      <td>300.7</td>\n",
       "      <td>0.292981</td>\n",
       "      <td>-0.481149</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.4</th>\n",
       "      <td>400.6</td>\n",
       "      <td>0.383455</td>\n",
       "      <td>-0.199363</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.5</th>\n",
       "      <td>500.5</td>\n",
       "      <td>0.481323</td>\n",
       "      <td>0.030935</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.6</th>\n",
       "      <td>600.4</td>\n",
       "      <td>0.588486</td>\n",
       "      <td>0.245125</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.7</th>\n",
       "      <td>700.3</td>\n",
       "      <td>0.696379</td>\n",
       "      <td>0.501393</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.8</th>\n",
       "      <td>800.2</td>\n",
       "      <td>0.806419</td>\n",
       "      <td>0.835011</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.9</th>\n",
       "      <td>900.1</td>\n",
       "      <td>0.907747</td>\n",
       "      <td>1.324424</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>1000.0</td>\n",
       "      <td>0.999809</td>\n",
       "      <td>3.170975</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          a         d         e   f\n",
       "0.0     1.0  0.000546 -2.994613   1\n",
       "0.1   100.9  0.100287 -1.198404   9\n",
       "0.2   200.8  0.203938 -0.825520  22\n",
       "0.3   300.7  0.292981 -0.481149  33\n",
       "0.4   400.6  0.383455 -0.199363  41\n",
       "0.5   500.5  0.481323  0.030935  51\n",
       "0.6   600.4  0.588486  0.245125  60\n",
       "0.7   700.3  0.696379  0.501393  69\n",
       "0.8   800.2  0.806419  0.835011  79\n",
       "0.9   900.1  0.907747  1.324424  89\n",
       "1.0  1000.0  0.999809  3.170975  99"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deciled = df.quantile(decile)\n",
    "deciled"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 基礎集計\n",
    "- 平均値\n",
    "- 中央値\n",
    "- plot moduleを試した"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>500.5</td>\n",
       "      <td>0.495922</td>\n",
       "      <td>0.029044</td>\n",
       "      <td>50.372</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       a         d         e       f\n",
       "0  500.5  0.495922  0.029044  50.372"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean = pd.DataFrame(df.mean()).T\n",
    "mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>500.5</td>\n",
       "      <td>0.481323</td>\n",
       "      <td>0.030935</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       a         d         e   f\n",
       "0  500.5  0.481323  0.030935  51"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "median = pd.DataFrame(df.median()).T\n",
    "median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11b603c18>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11b5e8940>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"d\"].plot(kind=\"hist\", bins=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11b788748>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x119c037f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[\"d\"].plot.hist(bins=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 正規化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 114.,   68.,   90.,  115.,  101.,  106.,  114.,   93.,  109.,   90.]),\n",
       " array([-1.76395676, -1.41382356, -1.06369036, -0.71355717, -0.36342397,\n",
       "        -0.01329077,  0.33684243,  0.68697562,  1.03710882,  1.38724202,\n",
       "         1.73737522]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n4/ZUa6tx1Tqzlc6m53zN/m83jWPf1mbcnvbLVa+11bg91TqjA2fTaDSa+3/Hjx8fHj9+/P8dP378\n2uPHjx89fvz4B48fP/7sPW5zW4taDvu/y2Ed1rAc/10Oa1i2dRwkmxa9hkXNvYprXtW5V3HNi557\nl1pkUwdzr+Kazd3XvE0+Y1dr3U7yH5K8J8mfJ3l7rfUjLeYCmJZsApaRbALmodln7Gqtv5PkWa3G\nBzgI2QQsI9kEzKrVWTEP4sSiC5iTE4suYA5OLLqAOTix6ALm4MSiC5iTE4suYA5OrODci5rX3Ksz\n7yrPPS8nzL0S85p7teY+8LyD0cg5IgEAAHq2TO/YAQAAcAAaOwAAgM4txReUl1JekuRnMm4031Jr\nvWPBJe2plHJNkl9OclWSc0l+odb6s6WUK5O8I8m1Se5JUmqtDy2s0CmUUo4k+UCST9Rar+ttDaWU\nJyf5xSRfnfF9cWOSv0pHa0iSUsqPJfn+jNfwoSSvSnJFlngdpZS3JHlZkpO11q+dXHfR/aeUckvG\n989Wkptqre9ZRN17KaX8dJLvSnImyV8neVWt9e932W6u2VVK+VdJbkvy7CRfX2v944tsd0+ShzLe\nVzZrrS+YZd59zj33vJ42c+a17mnWUEr52SQvTfJwkhtqrR88yFz7nbuU8s1J3pXkbyZX/Y9a63+e\nw7yPeazusk2rNV9y7lZrnoy963P1Lts1Wfu8LSqbJmOuXD4ddjZNxpJPu29zWeVTq2xa+Dt2k6bi\n55J8e5LnJnlFKeUQvqF8ZltJfrzW+twk35jk1ZO6b05yV631WUnem+SWBdY4rZuSfHjH5d7W8KYk\nv1VrfXaSr0vyF+lsDaWUq5P8SJLnT4JlLckrsvzreGvGj92ddq25lPKcJCXjJ+aXJnlzKWVwiLXu\nx3uSPLfW+rwkd2eXf/dG2fWhJP8yye/tsd25JMdqrf9kHn80TTt3w7yedj+fed3TrKGU8tIkX1Zr\n/YokP5Tkvx1kroPMPfH7tdbnT/6bS4OT3R+rO2trsuZp5p5osebk4s/Vn9V47fO2qGxKVjOfDi2b\nEvl0idoux3xqkk0Lb+ySvCDJ3bXWj9ZaN5O8Pcn1C65pT7XW+853zbXW00k+kuSajGu/c7LZnUle\nvpgKpzN5xeA7Mn7H67xu1lBK+fwk31RrfWuS1Fq3Jq+mdbOGHYZJriilrCV5QpJ7s+TrqLX+QZIH\nL7j6YjVfl/F3M23VWu/J+I+SeT3pz1Wt9a5a67nJxfdl/Ni+0Nyzq9b6l7XWu5Ps1fAOMuf8nnLu\nVnk97X4+j3VPs4brM34lNbXW9yd5cinlqhnnnXbuZO/7f98u8ljdqdWap5k7abDmydy7PVc/84LN\nmq193haVTZO5VzGfDjObEvl0MZddPrXKpmVo7J6Z5OM7Ln8ij13YUiulfEmS52UcslfVWk8m4zst\nydMXWNo03pjkJ5PsPD1qT2v40iT3l1LeWkr541LKz5dSnpi+1pBa6yeTvCHJxzJu6B6qtd6VztYx\n8fSL1HzhY/3e9PFYvzHJb+9y/SKza5Tkd0spf1RK+cFDmjNpt+aL7TMXmse6p1lDq3112n+/byyl\nfLCU8r8m73QfhkU/Ppuvecdz9fsv+NWi135Qy5hNyeWVT4eZTYl8uphFP0abrnme2bQUn7HrWSnl\nSUnemfHnhU6XUi78/oil/T6JUsp3ZnxM8QdLKccusenSriHjffj5SV5da/1AKeWNGR860c39kCSl\nlC/I+JWZazM+Tv/XSinfm87WcRFLWXMp5XczPrb9vEHGtb6u1vqbk21el/HnJX71MOedwgtrrX9b\nSnlaxn9MfGTyquNhzH0gl5j7P+2y+cX2mQOtuzP/N8kX11r/YXIYzv9M8pULrqm15mu+8Ll6nmPP\n26Kyadq5p9BVPsmmfZFPc17zvLNpGRq7e5N88Y7L10yuW3qTQ+bemeRttdZ3Ta4+WUq5qtZ6spTy\njCSfWlyFe3phkutKKd+R8aF/66WUtyW5r6M1fCLJx2utH5hc/vWMG7ue7ockeXGSv6m1PpAkpZTf\nSPLP0986kovXfG+SL9qx3UIf67XWb73U70spN2R8mPK3XGSTA2XXXvNOo9b6t5P/n5rsKy9Isucf\nEXOY+8B5fam5SylT7ecHXfcFpllDq311z7l3PrHXWn+7lPLmUspTzmdDQwt7fLZe80Weq3eSTVPO\nPeUYXeXTEmVTIp8uVdtll08tsmkZDsX8oyRfXkq5tpRyNMl3J3n3gmua1i8l+XCt9U07rnt3khsm\nP78y4zPpLKVa62trrV9ca/3HGf+7v7fW+n1JfjP9rOFkko+XUs6/evKiJH+eju6HiY8l+YZSyueV\n8QlFXpTxCW16WMcgjz7+/GI1vzvJd5dSjpZSvjTJlyf5w8Mqcj/K+MxgP5nkulrrmYts1jq7dj2m\nv5TyxMkrfCmlXJHk25L82RznvejcabfmPffzOa57mjW8O8m/ncz1DUk+ff5wrBntOffOz0+UUl6Q\nZDDHP5ozI8+CAAABl0lEQVQufKzu1GrNe87deM3J7s/VO7Ve+9wsSTYlq5NPh5lNiXxatXyaezYN\nRqPFHyU1Cao35XOnV719wSXtqZTywiS/n/GZmkaT/16b8R+qNeMO+6MZnxr304uqc1plfDrXn6jj\nrzt4SjpaQynl6zI++cvjMj4d7asyPhFJN2tIklLKrRkH6WaSP0nyA0nWs8TrKKX8apJjSb4wyckk\nt2Z8mMKvZZeay/jrDr4/4zUu89cd3J3kaJK/m1z1vlrrD5dS/lHGpyR+2WS7uWZXKeXlSf5rkqcm\n+XSSD9ZaX7pz3klT/BsZZ85akl+ZR2ZOM/dku7nn9cUyp9W6d1tDKeWHkoxqrT8/2ebnkrwk41NM\nv6pe5PTq8567lPLqJP8+48fII0l+bPKh+Vnn3e2xejSHs+ZLzt1qzZO5L/ZcfW0OYe3ztqhsmoy5\ncvl02Nl0sTXIp8svn1pl01I0dgAAABzcMhyKCQAAwAw0dgAAAJ3T2AEAAHROYwcAANA5jR0AAEDn\nNHYAAACd09gBAAB0TmMHAADQuf8PoNwPL558StYAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1263468d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.preprocessing import scale\n",
    "# normalize はベクトルの正規化だった\n",
    "figure, axes = plt.subplots(1, 3, figsize=(15, 5))\n",
    "df[\"f\"].hist(ax=axes[0])\n",
    "(df.f - df.f.mean()).div(df.f.std()).hist(ax=axes[1])\n",
    "plt.hist(scale(df[\"f\"].astype(\"float\")))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 累積構成比のための処理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d    1\n",
      "e    1\n",
      "f    1\n",
      "dtype: float64\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11e117240>"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAEECAYAAAAlEzNMAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xl8VNXdx/HPuSziElHcAaUtuCsoCrg82lhthdZKtfUo\nVeuG0ta1rdq6FHieulZBQSiKUHAFTpEKiLJYjTtFBW1RcNeyCFoUDCCY5P6eP2YwQwQygUnuZOb7\nfr14vbyTm5lvjpP55m7nOjNDRESKV5R0ABERSZaKQESkyKkIRESKnIpARKTIqQhERIqcikBEpMg1\nrW0F7/1I4CRgaQih40bWGQz0AFYB54YQXstpShERqTfZbBGMAk7c2Be99z2A9iGEvYE+wN3Zvrj3\nvjTbdQudxqKaxqKaxqKaxqL+1FoEIYTngc83sUpP4P70uv8EWnrvd8vy9UuzXK8YlCYdII+UJh0g\nj5QmHSCPlCYdoFDl4hhBG2BBxvKi9GMiItII6GCxiEiRq/VgcRYWAXtmLLdNP/YN6X18peuWQwj9\ngH45yNDohRBAYwFoLDJpLKppLNbnvf/fjMWyEELZ5j5XtkXg0v82ZBJwMTDOe38EsDyEsHRDK6aD\nlmU81G/x4sVZRihsJSUllJeXJx0jL2gsqmksqhXzWMQzy7AwEveDn+BOOJk2e7UjhNA/V8/vapt9\n1Hv/MKm/4ncClpJq5OaAhRCGp9cZAnQndfroeSGE2Vm+vqkIUor5TV6TxqKaxqJasY5F/PwM7NGH\niC69HteuAwCtW7eGjf9xXme1FkE9UxGkFeubfEM0FtU0FtWKbSys/Ats7HDs/beILu+H273t11/L\ndRHoYLGISJ6x12YS9/0VbLsdUf8h65VAfcjFwWIREcmR+OnHsSmB6PL+uG/t3SCvqSIQEckDtnoV\n8V/vgKWLiH5/C26X3RvstVUEIiIJswUfEN97O27vA3C9f4trsU2Dvr6KQEQkIVa+Ahs7AntjNs5f\ngDvyOJzL2THgrKkIREQSYCs+J77latw+BxHdMAy33faJZVERiIg0MJszk3jC/bijjyc66Yyk46gI\nREQailVWYg8Oxd6bT3TqOXBIt6QjASoCEZEGYWvXEI8YAJWVRNffgduqRdKRvqYiEBGpZ1ZZQTzs\nZty22+MuugzXrFnSkdajK4tFROqRvT6L+OrzcS22wZ1/Rd6VAGiLQESkXtjaNdijD2EvPUV08XXQ\nYf9ETg3NhopARCSHLK7Cyp7AZkyEtt8m+uOduJ12STrWJqkIRERyxP67lHjoTanJ4s76NRxwSN5u\nBWRSEYiI5IAt+4T4tmtwPzgF972TGkUBrKMiEBHZQvbBO8QjBuC+35Po+B8nHafOVAQiIlvA3p1H\nPPRG3OkX4LqVJh1ns6gIREQ2g32yGHtuBvb8dKLzf4s7+LCkI202FYGISB1YVRX22FjsH5NxR5QS\n9R2M23GnpGNtERWBiEiW7PNlxPfcClu1SJ0W2oA3j6lPKgIRkSzYW/8mvn8Irut3cT8+AxcVzsQM\nKgIRkU2wN+cQP3IfrFhO9PM+uM5HJh0p51QEIiIbYF+txSY9jL38HO7Uc3CHdMurGUNzSUUgIlKD\nVXxFPPj/AIiuG4jbfoeEE9UvFYGISAarqiIefhtu+x1SN5KPmiQdqd4VztEOEZEtZGvXEt99K1RW\npKaMLoISAG0RiIhgZvDOG8TjR+N2a4075ypc0/y7b0B9URGISFGztWtT9xH+4B3c0Sfgup/aqCaM\nywUVgYgULftkMfFdf8K160B0/UBci62TjpQIFYGIFB2Lq+CDd4j/chOux0+JTuiZdKREqQhEpGhY\nVRU261lswn3QvAXutPOJjihNOlbiVAQiUvCsogJ79QXsyUnQpAnRWRfjOnVJOlbeUBGISMGyiq+w\nyWOwpx+HPfYk+pGHgw/HNdVHXyaNhogUJFuzmnjIjbD1tkT978LttGvSkfKWikBECk783HTs8b/h\nDjgUd2aforkwbHOpCESkYFhlJXbfYOzDd4ku+C2036/orgnYHFkVgfe+O3AnqSkpRoYQbq3x9e2B\nB4G9gCbAgBDC6NxGFRHZOItjbNQgbO2XqWsCCnSm0PpQ61xD3vsIGAKcCBwI9PLe71djtYuBN0II\nhwDHAQO899raEJEGYWvXEN/ZD1u+jOiiq1QCdZTNh3VX4J0QwkcA3vuxQE9gfsY6BpSk/7sEWBZC\nqMxlUBGRDbFPlxCPGY5r2Qp3ziVFNUdQrmQz+2gbYEHG8sL0Y5mGAAd47xcDrwOX5yaeiMjG2bzX\niW+6ErfTrrhzLlUJbKZc7b45EZgTQvie9749MMN73zGEsDJzJe99KVC6bjmEQElJCQLNmzfXWKRp\nLKppLKrVHIu10yeyZsL9bPub/jQ78NAEkyXDe98/Y7EshFC2uc+VTREsInUQeJ226ccynQfcDBBC\neM97/wGwH/BK5krpoGUZD/UrLy+vW+ICVVJSgsYiRWNRTWNRbd1Y2NLF2JOTsNdmEl19C2t22Z01\nRTZGJSUlhBD65+r5simCl4EO3vt2wMfAGUCvGut8BJwAvOC93w3YB3g/VyFFRADi6Y9iT/wNd8wP\niPoOwpW0TDpSQai1CEIIVd77S4DpVJ8+Os973wewEMJw4AZgtPf+X+lvuzqE8Fm9pRaRomIrPmf1\nmHuwN18nunYAbpfdk45UUJyZJfn6tnjx4iRfP29oF0A1jUU1jUX6gPDIgTTvegyVJ/4U13LHpCMl\nrnXr1gA5u1JO5/qLSF4yM+yZqdjkMUTn/4Ztjji26EuxvqgIRCTv2OpV2EPDsI8XEF15I26PPZOO\nVNBUBCKSN2xVOTZ1AvbkRFy3UqI//BnXfKukYxU8FYGI5AVb+GHq1pHt9ye68R5cq12SjlQ0VAQi\nkjhb9BHxgOtxp5yNO+YHmjG0gakIRCRRVv4F8ZAbcKf31v2DE6IiEJFE2KdLsBkTsZefwx3bXSWQ\nIBWBiDQoW70Se+ox7KkpqSuEr71dF4glTEUgIg3G3nyNeOy9uHbtiS7vj2vXPulIgopARBpIXPY4\n9lgg+vlFcOiROiCcR1QEIlKv7O25xCMGwlYtiH5/i3YD5SEVgYjUC1vzJfbqC9j40URn/hIOO1pb\nAXlKRSAiOWVfLMdmPYNNnwit9yS65Hpc+5q3OZd8oiIQkZyw5cuwvz+IzZmJO6Qb0YVX4vY+IOlY\nkgUVgYhsEVu9kvie2+C9+bijjye6eThuW91eszFREYjIZrOP3iUeNQi378G4y/vioiZJR5LNoCIQ\nkc0SPzsNm3A/7uReuON+pAPBjZiKQETqxOIq7Nlp2JRAdM1tuN1aJx1JtpCKQESyZvNeJx4/Gpo1\nI7ri/1QCBUJFICJZiZ+egj3xSGpX0NEnaFdQAVERiMgm2VdrsYfvwd5/K3XbyF33SDqS5FiUdAAR\nyV+27BPim6+CiorULKEqgYKkLQIR+QZb82Xq6uAxw3E9z8SdeKp2BRUwFYGIfM3iKmzao9i0CdBh\nf6Irb9L0EEVARSAiWGUlNuclbEqAbUuILuuL+86+SceSBqIiEClyNvsl4rH3QqudiU79BRx8uHYD\nFRkVgUgRs1dfJB5zD9F5V+AOPDTpOJIQFYFIEbIvlmNTAvbqi0SX9tUtI4ucikCkiFgcYw8MxV59\nEdepC9H1A3A77JR0LEmYikCkSNgXnxOPGgxfriK6bRRuqxZJR5I8oSIQKXBmBm++RvzQMNyBnXH+\nAlyzZknHkjyiIhApYFZRgd03ODU9xM/OxXU+KulIkodUBCIFyCq+wqb9HZvxKOzXkaj/XbjmWyUd\nS/KUikCkwFj5F8QjbofKitT9AnZvm3QkyXMqApECYuUriG++Ctf5KNwpZ+Oa6NaRUrusisB73x24\nk9RspSNDCLduYJ1S4A6gGfBpCOG4HOYUkU2wtWuxsinYk5Nxx55I9OMzko4kjUit01B77yNgCHAi\ncCDQy3u/X411WgJDgZNCCAcBp9VDVhHZAFv5BfGwm7A35hD9+lqVgNRZNlsEXYF3QggfAXjvxwI9\ngfkZ6/wceCSEsAgghPDfXAcVkfVZHMPbc4lHD06dFtrrIlxT7e2VusvmXdMGWJCxvJBUOWTaB2jm\nvX8a2A4YHEJ4IDcRRaQmq6oivvtWWLIQ99Nzibr8T9KRpBHL1R3KmgKdgR5Ad+CP3vsOOXpuEclg\nny4hHnAdfLWGqN8glYBssWy2CBYBe2Ust00/lmkh8N8Qwhpgjff+WaAT8G7mSukDyqXrlkMIlJSU\n1D11AWrevLnGIk1jUa3mWFS+O4/Vg/9EixN+zFY//BmuafFcIaz3xfq89/0zFstCCGWb+1zOzGp7\nsSbAW8DxwMfALKBXCGFexjr7AXeR2hrYCvgncHoI4c1aXt8WL168udkLSklJCeXl5UnHyAsai2qZ\nYxE/OQmb+giu55lEx/wg4WQNT++Laq1btwbI2U0jat01FEKoAi4BpgNvAGNDCPO893289xel15kP\nTAP+BcwEhmdRAiKSBYtj4r8/iD09heia24qyBKR+1bpFUM+0RZCmv3aqaSyqbf3fj1k5fAA0bUr0\nq2twJS2TjpQYvS+q5XqLQOeaieQhM8OmjGPVk5NxPX+OK/2hbh8p9UZFIJJnbNVK4qE3QGUl2/95\nJKua674BUr9UBCJ5wior4I3XiKeMw7Vrj/O9iVq1Au0OkXqmIhDJA7ZqJfGg/gC4bqW443rgIk0Y\nJw1DRSCSMPt0CfGd/XGduuBOO1/HAqTBqQhEEmQfvkM87BZc958SHffDpONIkVIRiCTAVn6BPTYO\ne/k53BkXaZoISZSKQKQBWVVVqgBmTMQddhRR/yG4ku2TjiVFTkUg0kBszWriUYNhVTnRjXfjWu6Y\ndCQRQEUgUu8sjrEZE7Ep43CduuF6/xbXrHnSsUS+piIQqUeprYBBsPwzousG4nZrnXQkkW9QEYjU\nA1uzGnv6CezZqbj9O+F6X4lrVjxTRkvjoiIQyTF7/WXiB/+C2/sAovOugL0P0LUBktdUBCI5ZHNn\nE983mOj8K3AHHZZ0HJGsqAhEcsC+WotNHos9O5Xo0r64DvsnHUkkayoCkS1kHy8kvm8wbL0N0Z+G\n4bbfIelIInWiIhDZTFZVhU0Zhz09BdfjNNwJJ+OiWm/6J5J3VAQidWRmMHc28d/+Ci13TF0drIvD\npBFTEYjUgS1dTDxiAFR8hevxM9wRpTojSBo9FYFIFqyyAntmKvb433AnnYH7bnftBpKCoSIQqUU8\n61ns0Qdh1z2I+lyN2+egpCOJ5JSKQGQjbOEH2DPTsLmvEv3iEtivo3YDSUFSEYjUYGtWY2NHYG/M\nwXU9luja23ElLZOOJVJvVAQiGWzubOIHhuAO7Ez0p6G4FtskHUmk3qkIRNJs9ovEDw4jOvcyXMcu\nSccRaTAqAil6Vr4CmxKwWc8SXdEft1f7pCOJNCgVgRQtW/Qf7P352MSHcZ2PJOp/l6aHkKKkIpCi\nYp99ir32T+yFf8AXy+HbexOdfTGuk3YFSfFSEUhRsMoKrOxxbEpIHQg+5ezU6aBN9Ssgot8CKXhW\nvoJ44B9hh1ZEV96Ma7NX0pFE8oqKQAqarSonHvhHXMeuRKeclXQckbykIpCCZe/NJx49GNepC+4n\nZyYdRyRvqQik4FhVFTZtAjZ1Au6sX+G6HKOpIUQ2QUUgBcOWf4Y9MhqbOxvafovoqptwe3476Vgi\neU9FIAXB5s4mHj0I162U6PqBuJ12TTqSSKOhIpBGL37qMeyxcUS9f4c74JCk44g0OlkVgfe+O3An\nEAEjQwi3bmS9LsCLwOkhhAk5SymyAbb8M+IHhsKShakZQnfeLelIIo1SrbdY8t5HwBDgROBAoJf3\nfr+NrHcLMC3XIUUy2epVxJPHEve7BLfHnkR9B6kERLZANlsEXYF3QggfAXjvxwI9gfk11rsUGA/o\nWn2pN/b2XOLRg6H1XkR979SxAJEcyKYI2gALMpYXkiqHr3nvWwM/CSEc571f72siW8oqK7CXn8fm\nvATvv03U60LcYUcnHUukYOTqYPGdwO8zlnXStuSErVpJPKg/VFXhSnvgzr0Mt812SccSKSjZFMEi\nIHNylrbpxzIdDoz13jtgZ6CH974ihDApcyXvfSlQum45hEBJSclmxC48zZs311ikNW/enO223ZaK\nmWV8+cAwtjrqe7Q465dFeVGY3hfVNBbr8973z1gsCyGUbe5zOTOr7cWaAG8BxwMfA7OAXiGEeRtZ\nfxQwOcuzhmzx4sV1S1ygSkpKKC8vTzpGXth6yQJWDrsVmjUnOu083L4HJx0pMXpfVNNYVGvdujXk\ncM9LrVsEIYQq7/0lwHSqTx+d573vA1gIYXiNb9l0s4hshJnB7BdZNWY47rTzcV2PLcqtAJGGVusW\nQT3TFkFaMf+1Y3EMHy8kHnMPrCpnuwuu4Mu230k6Vl4o5vdFTRqLag2+RSBSXyyOYf6/iCfcD+Ur\nUpPDnXo2TVvuAPqFF2kwKgJpcGaGvfI89uiD0KQp7qTTcYf/Dy6q9fpGEakHKgJpUFZZiY0ciC38\nkMhfAB276DiASMJUBNIgLI6xl5/DZkyEljsS9RuEa9os6VgigopAGoAt+ID44XugfAXRz86Bgw7X\nTeNF8oh+G6Ve2UfvEg/6X9wPT8N9tweumbYCRPKNikDqjc17nfje24nO+jWu85FJxxGRjVARSM5Z\nZQX23Axs8hiiC6/E7d8p6UgisgkqAskZe/8t4kkPw3vzoV0Hokv/iPv2PknHEpFaqAgkJ+zfrxCP\nGIA79RzchVfittXkYCKNhYpAtoit+RKbcD/2yvNEl/bFddg/6UgiUkcqAqkzM4P5/8Jeehqb+ypu\n/0OI/m8obrvtk44mIptBRSB1Yov+QxxGwJJFuNIeRCecjNtLE8SJNGYqAsmKVVZgMyZi0/+OO/7H\nuMv74aImSccSkRxQEcgmWRzD67OIJz4ErXYhuupmXOu9av9GEWk0VASyUfb2G8QPDUvdKezkn8Oh\nR2iCOJECpCKQDYrLnsAmPkh0zqXQqZsKQKSAqQhkPWaGPTEee2Yq0R9uw+3WOulIIlLPVATyNauq\nwsbcg733FtE1f8btsFPSkUSkAagIJFUAT0/Bnn4cdtmN6OqbcVtvk3QsEWkgKoIiZpWVWBiBPTMV\n9j2Y6IzeuIMPTzqWiDQwFUGRsmWfEt97G2y9DdHNI3Ctdk46kogkREVQZKziK/jwXeJRd+K6laZu\nGKObxYgUNRVBkbBln2LTJmCznoVWO+O+35PouB8lHUtE8oCKoAjY/H8RD7sZ1/koomt0SqiIrE9F\nUMDsi+XYC//A/jGJqM/vcQccknQkEclDKoICZMs+xWY8iv2zDPY5ODU/kLYCRGQjVAQFJDVD6CRs\n6iO4w48mum4gbufdko4lInlORVAArKICe/V57MnJ0LRp6oKwNu2SjiUijYSKoJGzt+cSjx4Mu+yO\nO+6HuCO/h4uipGOJSCOiImjE7L35xHffSnTOZbhOXZKOIyKNlIqgEbKFHxI/+iC8/xbRuZfhOqoE\nRGTzqQgaGZv9EvEDQ1O7gX75B1xT/S8UkS2jT5FGwv67FHvkPuw/7xFdcj2u/X5JRxKRAqEiyHO2\n+D/Yk5OwV1/EdfsuUb/BuOZbJR1LRAqIiiBP2dq12JSx2HPTcd//SWpqiN3bJB1LRApQVkXgve8O\n3AlEwMgQwq01vv5z4PfpxXLgVyGEf+cyaDGxhR8QD7kR134/on534XZolXQkESlgtZ5w7r2PgCHA\nicCBQC/vfc0d1O8Dx4YQOgE3APfmOmixsNdmEg/sizvlbKILr1QJiEi9y2aLoCvwTgjhIwDv/Vig\nJzB/3QohhJkZ688EtA+jjuyrtcR/G4XNfpHo19fiOuyfdCQRKRLZFEEbYEHG8kJS5bAxvYEntiRU\nsbFXnueLMBLb8ztE196OK2mZdCQRKSI5PVjsvT8OOA/4n418vRQoXbccQqCkpCSXERoV+2otX94/\nlIrXZtHyyhtAp4QC0Lx586J+X2TSWFTTWKzPe98/Y7EshFC2uc+VTREsAvbKWG6bfqxmqI7AcKB7\nCOHzDT1ROmhZxkP9ysvLs81aUOzfrxCPG4nb6zu46wbAHm0o1rGoqaSkRGORprGoprGoVlJSQgih\nf66eL5sieBno4L1vB3wMnAH0ylzBe78X8AhwdgjhvVyFK1TxU49hj48n+sXFcPDhOOeSjiQiRazW\ns4ZCCFXAJcB04A1gbAhhnve+j/f+ovRqfwRaAX/x3s/x3s+qt8SNmMVVxJPHYk+MJ/rDrbiOXVQC\nIpI4Z2ZJvr4tXrw4yddvMPbefOL77oKWOxKddzmu1S7rfV2bvdU0FtU0FtU0FtVat24NkLO/InVl\ncT2zz5cR//UO+HgB0RkXwmFHaytARPKKiqAe2UfvEg+7BXfU8bhLrsdt1SLpSCIi36AiqAdmhs2Y\niD0xHnd6b6IjSpOOJCKyUSqCHLN35xGPvRe+XE30uxtwbb+VdCQRkU1SEeSQ/ec94r/chDvjQlzn\nI3FNmyUdSUSkViqCHDAz7Jmp2KSHic76Fa7zUUlHEhHJmopgC1llBfbQ3dhH7xJd2hf37b2TjiQi\nUicqgs1klRXYnJnYE+Nhp12Jrr4F12LrpGOJiNSZimAzWBwTjxgAyz/Ddf8prssxujZARBotFUEd\n2do1qRJYVU70uxtxzXRAWEQaNxVBluzTJdirL2BPTcHtdzCuz9U6K0hECoKKIAv25mvEIwbgDulG\n1Odq+M6+2hUkIgVDRbAJtnYt9shobPZLuDMuJOp6bNKRRERyTkWwEbbsE+JRg2CrFkTXD8DtsFPS\nkURE6oWKYAPi52dg40fjTjg5dVZQUw2TiBQufcJlsC+WYxPuw15/mej3t+D22DPpSCIi9a7WO5QV\nC5v3OnH/S2Gb7YhuvFslICJFo+i3CCyOscfGYc9NS9057ODDk44kItKgirYILI7h7bnE0/4Oa1YT\nXTcQt0OrpGOJiDS4oiwCe/dN4ofuBjPcMT/AHXsirlnzpGOJiCSiqIrAln2CPT4em/0i0Vm/gs5H\n6cIwESl6RVEEVlmJvfQUNvEhXJdjia6/A7fTLknHEhHJCwVfBPbefOKH74EmTYguuhq3z4FJRxIR\nySsFWwT21Vps3EjsledwvS7CdSvVbiARkQ0oyCKwJYuI770dt3sbohvuxpW0TDqSiEjeKrgisDkz\nUzOF9jwT9/2e2goQEalFwRSBfbqE+IGhsOADot/dgPvOvklHEhFpFBp9Edjyz7B/zcKmTsAdfQKu\n9+9w2++QdCwRkUajURaBmcHc2cSTx8DSRbiDDiM6vTeuU9eko4mINDqNrghs2SfY5DHY/H8T+fOh\nYxfdMlJEZAs0miIwM3j1BeKH7sYddhTR9QNx222fdCwRkUYv74vAPl6IzX4Re/EpiCKii6/Dddg/\n6VgiIgUjb4vA4hib+DD23DRc12OJfnEx7HOQTgcVEcmxvCwCW/Ml8ag7YcXnRP3v0llAIiL1KO+K\nwJZ9QjzkBly79rjeV+Ka6UCwiEh9yqoIvPfdgTtJ3dpyZAjh1g2sMxjoAawCzg0hvFaXIGYGb8wh\nHj0Yd+IpqRvHazeQiEi9q/Wexd77CBgCnAgcCPTy3u9XY50eQPsQwt5AH+DuuoSwD98hvv1a4nEj\niM69jEhTQ4iINJhsbl7fFXgnhPBRCKECGAv0rLFOT+B+gBDCP4GW3vvdsgkQ//MZ4jv64g49kuh/\nh+AO6lyH+CIisqWy2TXUBliQsbyQVDlsap1F6ceW1vbkNuE+ot+mjgmIiEjDS/xgcXTVzbids9p4\nEBGRepBNESwC9spYbpt+rOY6e9ayDt77UqB03XIIgTYdD80yauErKSlJOkLe0FhU01hU01hU8973\nz1gsCyGUbe5zZVMELwMdvPftgI+BM4BeNdaZBFwMjPPeHwEsDyF8Y7dQOujXYb33hBD6b1byAuO9\n76+xSNFYVNNYVNNYrC+EkLPnqvVgcQihCrgEmA68AYwNIczz3vfx3l+UXudx4APv/bvAPcCvc5ZQ\nRETqVVbHCEIIU4F9azx2T43lS3KYS0REGkg2p4/Wp7KEXz+flCUdII+UJR0gj5QlHSCPlCUdoFA5\nM0s6g4iIJCjpLQIREUmYikBEpMgldkFZNhPZFQrvfVtSU3DsBsTAvSGEwd77HYFxQDvgQ8CHEFak\nv+ca4HygErg8hDA9iez1JT2H1SvAwhDCycU6Ft77lsAI4CBS743zgbcpzrH4DXABqXH4N3AesC1F\nMhbe+5HAScDSEELH9GN1/r3w3ncGRgMtgMdDCFfU9tqJbBFkM5FdgakEfhtCOBA4Erg4/fP+AXgy\nhLAv8BRwDYD3/gDAA/uTmtH1L977QpuF73LgzYzlYh2LQaR+WfcHOgHzKcKx8N63Bi4FOqc/BJuS\nul6pmMZiFKnPxEyb8/MPAy4IIewD7OO9r/mc35DUrqFsJrIrGCGEJeum5Q4hrATmkbr6uidwX3q1\n+4CfpP/7ZFLXa1SGED4E3uGb8zs1WuktpB+S+kt4naIbC+/99sAxIYRRAOmfcQVFOBZpTYBtvfdN\nga1JzU5QNGMRQnge+LzGw3X6+b33uwMlIYSX0+vdn/E9G5VUEWxoIrs2CWVpUN77bwGHADOB3dZd\ngR1CWALsml5tY5P4FYo7gKuAzFPWinEsvg3813s/yns/23s/3Hu/DUU4FiGExcAA4D+kfq4VIYQn\nKcKxqGHXOv78bUh9nq6T1WerDhY3IO/9dsB4UvvzVrL+ByEbWC443vsfkdoH+hqwqU35gh8LUrs/\nOgNDQwidSd3U6Q8U5/tiB1J//bYDWpPaMjiTIhyLWtTLz59UEWQzkV1BSW/ujgceCCFMTD+8dN19\nG9KbdJ+kH89qEr9G6mjgZO/9+8AY4Hve+weAJUU4FguBBSGEV9LLj5AqhmJ8X5wAvB9C+Cw9rc3f\ngaMozrHIVNeff7PGJamzhrKZyK7Q/BV4M4QwKOOxScC5wK3AOcDEjMcf8t7fQWqzrgMwq+Gi1p8Q\nwrXAtQAKARXlAAABBUlEQVTe++8CvwshnO29/zPFNxZLvfcLvPf7hBDeBo4nNZ/XGxTZWJDaJXSE\n974FsJbUWLwMrKS4xsKx/pZynT4jQgjmvV/hve9Kavx+AQyu9UWTurI4ffroIKpPH70lkSANwHt/\nNPAsqVPiLP3vWlJv3ECqwT8idWrY8vT3XEPqVLoKCuDUuA3JKIKTvfetKMKx8N53InXQvBnwPqlT\nJptQnGPRj9QfhRXAHKA3UEKRjIX3/mFS0/TvROqmXv2AR4G/UYef33t/GOufPnp5ba+tKSZERIqc\nDhaLiBQ5FYGISJFTEYiIFDkVgYhIkVMRiIgUORWBiEiRUxGIiBQ5FYGISJH7f5tV3+aLrMeCAAAA\nAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11e11fa58>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "columns = list(\"def\")\n",
    "normalized_df = df[columns].div(df[columns].sum())\n",
    "print(normalized_df.sum())\n",
    "normalized_df[\"f\"].cumsum().plot()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 分布\n",
    "http://docs.scipy.org/doc/numpy/reference/routines.random.html#distributions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|name|arguments|\n",
    "|----|---------|\n",
    "|beta|(a, b[, size])|\n",
    "|binomial|(n, p[, size])|\n",
    "|chisquare|(df[, size])|\n",
    "|dirichlet|(alpha[, size])|\n",
    "|exponential|([scale, size])|\n",
    "|f|(dfnum, dfden[, size])|\n",
    "|gamma|(shape[, scale, size])|\n",
    "|geometric|(p[, size])|\n",
    "|gumbel|([loc, scale, size])|\n",
    "|hypergeometric|(ngood, nbad, nsample[, size])|\n",
    "|laplace|([loc, scale, size])|\n",
    "|logistic|([loc, scale, size])|\n",
    "|lognormal|([mean, sigma, size])|\n",
    "|logseries|(p[, size])|\n",
    "|multinomial|(n, pvals[, size])|\n",
    "|multivariate_normal|(mean, cov[, size])|\n",
    "|negative_binomial|(n, p[, size])|\n",
    "|noncentral_chisquare|(df, nonc[, size])|\n",
    "|noncentral_f|(dfnum, dfden, nonc[, size])|\n",
    "|normal|([loc, scale, size])|\n",
    "|pareto|(a[, size])|\n",
    "|poisson|([lam, size])|\n",
    "|power|(a[, size])|\n",
    "|rayleigh|([scale, size])|\n",
    "|standard_cauchy|([size])|\n",
    "|standard_exponential|([size])|\n",
    "|standard_gamma|(shape[, size])|\n",
    "|standard_normal|([size])|\n",
    "|standard_t|(df[, size])|\n",
    "|triangular|(left, mode, right[, size])|\n",
    "|uniform|([low, high, size])|\n",
    "|vonmises|(mu, kappa[, size])|\n",
    "|wald|(mean, scale[, size])|\n",
    "|weibull|(a[, size])|\n",
    "|zipf\t|(a[, size])|\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## formula式\n",
    "- Rのあれ\n",
    "- patsyというpydata提供のモジュール\n",
    "- statsmodelsにformulaあったなぁと調べたら、これだった"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<unknown>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<unknown>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    .\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "import patsy \n",
    "patsy.dmatrices(\"c ~ .\", df, return_type=\"dataframe\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Intercept</th>\n",
       "      <th>b[T.b]</th>\n",
       "      <th>b[T.c]</th>\n",
       "      <th>b[T.d]</th>\n",
       "      <th>b[T.e]</th>\n",
       "      <th>b[T.f]</th>\n",
       "      <th>b[T.g]</th>\n",
       "      <th>b[T.h]</th>\n",
       "      <th>b[T.i]</th>\n",
       "      <th>b[T.j]</th>\n",
       "      <th>...</th>\n",
       "      <th>b[T.t]</th>\n",
       "      <th>b[T.u]</th>\n",
       "      <th>b[T.v]</th>\n",
       "      <th>b[T.w]</th>\n",
       "      <th>b[T.x]</th>\n",
       "      <th>b[T.y]</th>\n",
       "      <th>a</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.548814</td>\n",
       "      <td>-0.101697</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.715189</td>\n",
       "      <td>0.019279</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.602763</td>\n",
       "      <td>1.849591</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.544883</td>\n",
       "      <td>-0.214167</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.423655</td>\n",
       "      <td>-0.499017</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Intercept  b[T.b]  b[T.c]  b[T.d]  b[T.e]  b[T.f]  b[T.g]  b[T.h]  b[T.i]  \\\n",
       "0          1       0       0       0       0       0       0       0       0   \n",
       "1          1       1       0       0       0       0       0       0       0   \n",
       "2          1       0       1       0       0       0       0       0       0   \n",
       "3          1       0       0       1       0       0       0       0       0   \n",
       "4          1       0       0       0       1       0       0       0       0   \n",
       "\n",
       "   b[T.j] ...  b[T.t]  b[T.u]  b[T.v]  b[T.w]  b[T.x]  b[T.y]  a         d  \\\n",
       "0       0 ...       0       0       0       0       0       0  1  0.548814   \n",
       "1       0 ...       0       0       0       0       0       0  2  0.715189   \n",
       "2       0 ...       0       0       0       0       0       0  3  0.602763   \n",
       "3       0 ...       0       0       0       0       0       0  4  0.544883   \n",
       "4       0 ...       0       0       0       0       0       0  5  0.423655   \n",
       "\n",
       "          e   f  \n",
       "0 -0.101697  53  \n",
       "1  0.019279  76  \n",
       "2  1.849591  54  \n",
       "3 -0.214167  94  \n",
       "4 -0.499017  68  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y, X = patsy.dmatrices(\"c ~ a + b + d + e + f\", df, return_type=\"dataframe\")\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1,\n",
       "       1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,\n",
       "       1, 1, 1, 1])"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.random.randint(0, 1+1, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>d</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.00000</td>\n",
       "      <td>50</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.460000</td>\n",
       "      <td>24.50000</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.520000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.128662</td>\n",
       "      <td>14.57738</td>\n",
       "      <td>0.505076</td>\n",
       "      <td>0.504672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>False</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.25000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>24.50000</td>\n",
       "      <td>0.5</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>36.75000</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>49.00000</td>\n",
       "      <td>True</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               a         b         d          y\n",
       "count  50.000000  50.00000        50  50.000000\n",
       "mean    1.460000  24.50000       0.5   0.520000\n",
       "std     1.128662  14.57738  0.505076   0.504672\n",
       "min     0.000000   0.00000     False   0.000000\n",
       "25%     0.000000  12.25000         0   0.000000\n",
       "50%     2.000000  24.50000       0.5   1.000000\n",
       "75%     2.000000  36.75000         1   1.000000\n",
       "max     3.000000  49.00000      True   1.000000"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ex = pd.DataFrame(\n",
    "    {\n",
    "        \"a\": np.random.randint(0, 3+1, 50),\n",
    "        \"b\": range(50),\n",
    "        \"c\": list(\"abcde\") * 10,\n",
    "        \"d\": [False, True] * 25,\n",
    "        \"y\": np.random.randint(0, 1+1, 50)\n",
    "    }\n",
    ")\n",
    "df_ex.describe()             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Intercept</th>\n",
       "      <th>C(a)[T.1]</th>\n",
       "      <th>C(a)[T.2]</th>\n",
       "      <th>C(a)[T.3]</th>\n",
       "      <th>c[T.b]</th>\n",
       "      <th>c[T.c]</th>\n",
       "      <th>c[T.d]</th>\n",
       "      <th>c[T.e]</th>\n",
       "      <th>d[T.True]</th>\n",
       "      <th>b</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Intercept  C(a)[T.1]  C(a)[T.2]  C(a)[T.3]  c[T.b]  c[T.c]  c[T.d]  c[T.e]  \\\n",
       "0          1          0          0          0       0       0       0       0   \n",
       "1          1          1          0          0       1       0       0       0   \n",
       "2          1          0          1          0       0       1       0       0   \n",
       "3          1          0          1          0       0       0       1       0   \n",
       "4          1          1          0          0       0       0       0       1   \n",
       "\n",
       "   d[T.True]  b  y  \n",
       "0          0  0  1  \n",
       "1          1  1  0  \n",
       "2          0  2  1  \n",
       "3          1  3  1  \n",
       "4          0  4  0  "
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "outcome, predictors = patsy.dmatrices(\"y ~ C(a) + b + c + d\",  df_ex, return_type=\"dataframe\")\n",
    "pd.concat([predictors, outcome], axis=1).head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Intercept</th>\n",
       "      <th>C(a)[T.1]</th>\n",
       "      <th>C(a)[T.2]</th>\n",
       "      <th>C(a)[T.3]</th>\n",
       "      <th>c[T.b]</th>\n",
       "      <th>c[T.c]</th>\n",
       "      <th>c[T.d]</th>\n",
       "      <th>c[T.e]</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1</td>\n",
       "      <td>0.220000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>24.50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0</td>\n",
       "      <td>0.418452</td>\n",
       "      <td>0.404061</td>\n",
       "      <td>0.471212</td>\n",
       "      <td>0.404061</td>\n",
       "      <td>0.404061</td>\n",
       "      <td>0.404061</td>\n",
       "      <td>0.404061</td>\n",
       "      <td>14.57738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.25000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>24.50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>36.75000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>49.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Intercept  C(a)[T.1]  C(a)[T.2]  C(a)[T.3]     c[T.b]     c[T.c]  \\\n",
       "count         50  50.000000  50.000000  50.000000  50.000000  50.000000   \n",
       "mean           1   0.220000   0.200000   0.320000   0.200000   0.200000   \n",
       "std            0   0.418452   0.404061   0.471212   0.404061   0.404061   \n",
       "min            1   0.000000   0.000000   0.000000   0.000000   0.000000   \n",
       "25%            1   0.000000   0.000000   0.000000   0.000000   0.000000   \n",
       "50%            1   0.000000   0.000000   0.000000   0.000000   0.000000   \n",
       "75%            1   0.000000   0.000000   1.000000   0.000000   0.000000   \n",
       "max            1   1.000000   1.000000   1.000000   1.000000   1.000000   \n",
       "\n",
       "          c[T.d]     c[T.e]         b  \n",
       "count  50.000000  50.000000  50.00000  \n",
       "mean    0.200000   0.200000  24.50000  \n",
       "std     0.404061   0.404061  14.57738  \n",
       "min     0.000000   0.000000   0.00000  \n",
       "25%     0.000000   0.000000  12.25000  \n",
       "50%     0.000000   0.000000  24.50000  \n",
       "75%     0.000000   0.000000  36.75000  \n",
       "max     1.000000   1.000000  49.00000  "
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Intercept</th>\n",
       "      <th>C(b)[T.b]</th>\n",
       "      <th>C(b)[T.c]</th>\n",
       "      <th>C(b)[T.d]</th>\n",
       "      <th>C(b)[T.e]</th>\n",
       "      <th>C(b)[T.f]</th>\n",
       "      <th>C(b)[T.g]</th>\n",
       "      <th>C(b)[T.h]</th>\n",
       "      <th>C(b)[T.i]</th>\n",
       "      <th>C(b)[T.j]</th>\n",
       "      <th>...</th>\n",
       "      <th>C(b)[T.t]</th>\n",
       "      <th>C(b)[T.u]</th>\n",
       "      <th>C(b)[T.v]</th>\n",
       "      <th>C(b)[T.w]</th>\n",
       "      <th>C(b)[T.x]</th>\n",
       "      <th>C(b)[T.y]</th>\n",
       "      <th>a</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "      <th>f</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.548814</td>\n",
       "      <td>-0.101697</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.715189</td>\n",
       "      <td>0.019279</td>\n",
       "      <td>76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.602763</td>\n",
       "      <td>1.849591</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0.544883</td>\n",
       "      <td>-0.214167</td>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.423655</td>\n",
       "      <td>-0.499017</td>\n",
       "      <td>68</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Intercept  C(b)[T.b]  C(b)[T.c]  C(b)[T.d]  C(b)[T.e]  C(b)[T.f]  \\\n",
       "0          1          0          0          0          0          0   \n",
       "1          1          1          0          0          0          0   \n",
       "2          1          0          1          0          0          0   \n",
       "3          1          0          0          1          0          0   \n",
       "4          1          0          0          0          1          0   \n",
       "\n",
       "   C(b)[T.g]  C(b)[T.h]  C(b)[T.i]  C(b)[T.j] ...  C(b)[T.t]  C(b)[T.u]  \\\n",
       "0          0          0          0          0 ...          0          0   \n",
       "1          0          0          0          0 ...          0          0   \n",
       "2          0          0          0          0 ...          0          0   \n",
       "3          0          0          0          0 ...          0          0   \n",
       "4          0          0          0          0 ...          0          0   \n",
       "\n",
       "   C(b)[T.v]  C(b)[T.w]  C(b)[T.x]  C(b)[T.y]  a         d         e   f  \n",
       "0          0          0          0          0  1  0.548814 -0.101697  53  \n",
       "1          0          0          0          0  2  0.715189  0.019279  76  \n",
       "2          0          0          0          0  3  0.602763  1.849591  54  \n",
       "3          0          0          0          0  4  0.544883 -0.214167  94  \n",
       "4          0          0          0          0  5  0.423655 -0.499017  68  \n",
       "\n",
       "[5 rows x 29 columns]"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y, X = patsy.dmatrices(\"c ~ a + C(b) + d + e + f\", df, return_type=\"dataframe\")\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>c[1]</th>\n",
       "      <th>c[2]</th>\n",
       "      <th>c[3]</th>\n",
       "      <th>c[4]</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   c[1]  c[2]  c[3]  c[4]\n",
       "0     1     0     0     0\n",
       "1     0     1     0     0\n",
       "2     0     0     1     0\n",
       "3     0     0     0     1\n",
       "4     1     0     0     0"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([ 1.,  0.,  0., ...,  0.,  0.,  1.]), 4000)"
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.ravel(y), len(np.ravel(y))"
   ]
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  },
  "toc": {
   "toc_cell": true,
   "toc_number_sections": true,
   "toc_section_display": "none",
   "toc_threshold": 6,
   "toc_window_display": true
  },
  "toc_position": {
   "height": "337px",
   "left": "1136.23px",
   "right": "20px",
   "top": "120px",
   "width": "174px"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
